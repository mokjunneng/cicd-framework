name: Build
on: [push, pull_request]
jobs:
  lint:
    runs-on: ubuntu-latest
    # container:
    # image:
    # env:
    # ports:
    # volumes:
    # options:
    steps:
      # local path: ./.github/actions/my-action, public action: {owner}/{repo}/{path}@{ref}
      # Choose the right linting action for your language
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - id: go-lint
        uses: ./.github/actions/go-lint
        with:
          paths: ./app...
          output: lint.xml # standardized path to match sonarqube properties
          #config-path:
      # Use golangci-lint's own Github action instead
      # - name: golangci-lint
      #   uses: golangci/golangci-lint-action@v2
      #   with:
      #     version: latest
      - name: Upload lint as artifact
        uses: actions/upload-artifact@v2
        with:
          name: lint-result
          path: lint.xml
  test:
    runs-on: ubuntu-latest
    needs: lint
    # container:
    #   image:
    #   env:
    #   ports:
    #   volumes:
    #   options:
    steps:
      # Choose the right testing action for your language
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - uses: ./.github/actions/go-test
        with:
          path: ./app/test
          test-report-path: tests.out # standardized path to match sonarqube properties
          coverage-report-path: coverage.out # standardized path to match sonarqube properties
      - name: Upload test results as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-report
          path: tests.out
      - name: Upload test coverage as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.out
  sonarScan:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      # - uses: docker://sonarsource/sonar-scanner-cli:latest
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Download lint results
        uses: actions/download-artifact@v1
        with:
          name: lint-result
          path: lint-result
      - name: Download test results
        uses: actions/download-artifact@v1
        with:
          name: test-report
          path: test-report
      - name: Download code coverage results
        uses: actions/download-artifact@v1
        with:
          name: coverage-report
          path: coverage
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  goreleaser:
    runs-on: ubuntu-latest
    needs: [lint, test, sonarScan]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Build and release with goreleaser
        uses: ./.github/actions/goreleaser
        with:
          args: "release --rm-dist --config ./app/.goreleaser.yml"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
  publishToUbuntuPpa:
    runs-on: ubuntu-latest
    needs: goreleaser
    steps:
      - name: Download builds
        uses: actions/download-artifact@v1
        with:
          name: app
          path: app # build folder
      - name: Get the package name
        id: get_package_name
        run: echo ::set-output name=PACKAGE_NAME::${GITHUB_REPOSITORY#*/}_v${GITHUB_REF/refs\/tags\//}
      - name: Publish builds to Ubuntu PPA
        uses: ./.github/actions/ubuntu-publish
        with:
          build-folder: ${{ steps.get_package_name.outputs.PACKAGE_NAME }}
          artifact-path: app
          package-name: ${{ steps.get_package_name.outputs.PACKAGE_NAME }}
          email: principals@atomi.cloud # should this be our own email?
          author: ${{ github.repository_owner }}
          section: util
          ci-project-url: https://github.com/${{github.repository}}
          ci-repository-url: https://github.com/${{github.repository}}.git
          target-ppa: mokjn/atomicloud
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          GPG_OWNERTRUST: ${{ secrets.GPGP_OWNERTRUST }}
